[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "file_downloader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "file_downloader",
        "description": "file_downloader",
        "detail": "file_downloader",
        "documentation": {}
    },
    {
        "label": "web_copier",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "web_copier",
        "description": "web_copier",
        "detail": "web_copier",
        "documentation": {}
    },
    {
        "label": "imp_items",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imp_items",
        "description": "imp_items",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "FileDownloader",
        "kind": 6,
        "importPath": "file_downloader",
        "description": "file_downloader",
        "peekOfCode": "class FileDownloader:\n    \"\"\"\n    file_downloader class\n    This class provides methods to download and extract files from URLs.\n    methods:\n        __init__: Initializes the FileDownloader object.\n        download_and_extract: Downloads a ZIP file from a URL and extracts its contents.\n    \"\"\"\n    def __init__(self):\n        \"\"\"",
        "detail": "file_downloader",
        "documentation": {}
    },
    {
        "label": "format_date",
        "kind": 2,
        "importPath": "imp_items",
        "description": "imp_items",
        "peekOfCode": "def format_date(input_date):\n    \"\"\"\n    Return the date in the format \"26APR2024\".\n    Args:\n        input_date (str): The input date string.\n    Returns:\n        str: The formatted date string.\n    \"\"\"\n    # Parse the input date string\n    parsed_date = datetime.strptime(input_date, '%Y-%m-%d')",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "today_date",
        "kind": 5,
        "importPath": "imp_items",
        "description": "imp_items",
        "peekOfCode": "today_date = datetime.today()\n# Format the date using the format_date function\nformatted_today_date = format_date(today_date.strftime('%Y-%m-%d'))\n# List of website URLs\nwebsite_urls = [\n    f'https://nsearchives.nseindia.com/content/historical/EQUITIES/{today_date.strftime(\"%Y\")}/{today_date.strftime(\"%b\")}/cm{formatted_today_date}bhav.csv.zip',\n    'https://www.topstockresearch.com/rt/Screener/Technical/PivotPoint/StandardPivotPoint/ListSupportOrResistance'\n]\n# Path to the \"Documents\" folder\ndocuments_folder = os.path.expanduser('~/Documents')",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "formatted_today_date",
        "kind": 5,
        "importPath": "imp_items",
        "description": "imp_items",
        "peekOfCode": "formatted_today_date = format_date(today_date.strftime('%Y-%m-%d'))\n# List of website URLs\nwebsite_urls = [\n    f'https://nsearchives.nseindia.com/content/historical/EQUITIES/{today_date.strftime(\"%Y\")}/{today_date.strftime(\"%b\")}/cm{formatted_today_date}bhav.csv.zip',\n    'https://www.topstockresearch.com/rt/Screener/Technical/PivotPoint/StandardPivotPoint/ListSupportOrResistance'\n]\n# Path to the \"Documents\" folder\ndocuments_folder = os.path.expanduser('~/Documents')\nbase_path = os.path.join(documents_folder, 'stock_ai')\n# List of paths",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "website_urls",
        "kind": 5,
        "importPath": "imp_items",
        "description": "imp_items",
        "peekOfCode": "website_urls = [\n    f'https://nsearchives.nseindia.com/content/historical/EQUITIES/{today_date.strftime(\"%Y\")}/{today_date.strftime(\"%b\")}/cm{formatted_today_date}bhav.csv.zip',\n    'https://www.topstockresearch.com/rt/Screener/Technical/PivotPoint/StandardPivotPoint/ListSupportOrResistance'\n]\n# Path to the \"Documents\" folder\ndocuments_folder = os.path.expanduser('~/Documents')\nbase_path = os.path.join(documents_folder, 'stock_ai')\n# List of paths\npaths = [base_path,os.path.join(base_path,'data'),os.path.join(base_path,'results')]\nprint(website_urls)",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "documents_folder",
        "kind": 5,
        "importPath": "imp_items",
        "description": "imp_items",
        "peekOfCode": "documents_folder = os.path.expanduser('~/Documents')\nbase_path = os.path.join(documents_folder, 'stock_ai')\n# List of paths\npaths = [base_path,os.path.join(base_path,'data'),os.path.join(base_path,'results')]\nprint(website_urls)\nprint(paths)",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "base_path",
        "kind": 5,
        "importPath": "imp_items",
        "description": "imp_items",
        "peekOfCode": "base_path = os.path.join(documents_folder, 'stock_ai')\n# List of paths\npaths = [base_path,os.path.join(base_path,'data'),os.path.join(base_path,'results')]\nprint(website_urls)\nprint(paths)",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "paths",
        "kind": 5,
        "importPath": "imp_items",
        "description": "imp_items",
        "peekOfCode": "paths = [base_path,os.path.join(base_path,'data'),os.path.join(base_path,'results')]\nprint(website_urls)\nprint(paths)",
        "detail": "imp_items",
        "documentation": {}
    },
    {
        "label": "#downloader",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "#downloader = fd.FileDownloader()\nweb_copier = wc.WebTableCopier()\ncopied_table = web_copier.copy_table(imp_items.website_urls[1], , os.path.join(imp_items.paths[1],imp_items.formatted_today_date))\n#downloader.download_and_extract(\"https://example.com/example.zip\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "web_copier",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "web_copier = wc.WebTableCopier()\ncopied_table = web_copier.copy_table(imp_items.website_urls[1], , os.path.join(imp_items.paths[1],imp_items.formatted_today_date))\n#downloader.download_and_extract(\"https://example.com/example.zip\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "copied_table",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "copied_table = web_copier.copy_table(imp_items.website_urls[1], , os.path.join(imp_items.paths[1],imp_items.formatted_today_date))\n#downloader.download_and_extract(\"https://example.com/example.zip\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "WebTableCopier",
        "kind": 6,
        "importPath": "web_copier",
        "description": "web_copier",
        "peekOfCode": "class WebTableCopier:\n    \"\"\"\n    WebTableCopier Class\n    This class provides a method to copy tables from a given website.\n    \"\"\"\n    def __init__(self, timeout=10):\n        \"\"\"\n        Initialize the WebTableCopier object.\n        Args:\n            timeout (int, optional): The number of seconds to wait for the server to respond.",
        "detail": "web_copier",
        "documentation": {}
    }
]